const { ObjectId } = require("mongodb");
const UserCollection = require("../model/userSchema");
const InvoiceCollection = require("../model/invoiceSchema");

// ******** Handling Schema errors ************ //
// ******************************************** //

const handleErrors = (err) => {
  const errors = {
    consignorName: "",
    consignorEmail: "",
    consignorPhoneNumber: "",
    consigneeName: "",
    consigneeEmail: "",
    consigneePhoneNumber: "",
    invoiceNumber: "",
    invoiceDueDate: "",
    description: "",
    rate: "",
    qty: "",
  };
  if (err.code === 11000) {
    errors.invoiceNumber = "Invoice number already exists";
    return errors;
  }
  if (err.message.includes("invoices validation failed")) {
    Object.values(err.errors).forEach(({ properties }) => {
      errors[properties.path] = properties.message;
    });
  }
  return errors;
};

// ******** generate invoice  ************ //
// ******************************************** //

module.exports.create_invoice = async (req, res) => {
  try {
    // collecting data from the request body
    const {
      consignorName,
      consignorEmail,
      consignorAddress,
      consignorPhoneNumber,
      consigneeName,
      consigneeEmail,
      consigneeAddress,
      consigneePhoneNumber,
      invoiceNumber,
      dateCreated,
      invoiceDueDate,
      products: [{ description, rate, qty, amount, taxPct }],
      totalAmount,
      totalTax,
      totalPayable,
      invoiceNotes,
    } = req.body;

    const user = req.user;
    if (!user) return res.sendStatus(401);

    // if user has already created any invoices
    const user_id = await InvoiceCollection.findOne({
      userId: ObjectId(user._id),
    });

    // if not, create a new field, store the invoice information
    if (!user_id) {
      // data to be inserted
      const invoiceData = {
        userId: user._id,
        invoices: [
          {
            consignorName,
            consignorEmail,
            consignorAddress,
            consignorPhoneNumber,
            consigneeName,
            consigneeEmail,
            consigneeAddress,
            consigneePhoneNumber,
            invoiceNumber,
            dateCreated,
            invoiceDueDate,
            products: [{ description, rate, qty, amount, taxPct }],
            totalAmount,
            totalTax,
            totalPayable,
            invoiceNotes,
          },
        ],
      };

      // first invoice generated by a user
      const firstInvoice = await InvoiceCollection.create(invoiceData);

      // insert a refrence to userdatabase of this invoice
      if (!firstInvoice) res.sendStatus(501);

      const result = await UserCollection.updateOne(
        { _id: ObjectId(user._id) },
        {
          $push: {
            invoiceId: {
              $each: [{ inId: firstInvoice.invoices[0]._id }],
              $position: 0,
            },
          },
        }
      );
      res.status(200).json("Invoice created");

      //else, inserting the invoice into existing user invoices
    } else {
      const invoiceNumber = await InvoiceCollection.findOne({
        "invoices.invoiceNumber": req.body.invoiceNumber,
      });
      if (invoiceNumber !== null)
        return res.status(409).json("Invoice number already exists");

      const insertInvoice = await InvoiceCollection.findOneAndUpdate(
        { userId: ObjectId(user._id) },
        {
          $push: { invoices: { $each: [req.body], $position: 0 } },
        },
        { fields: { invoices: 1 }, new: true }
      );

      if (!insertInvoice) res.sendStatus(501);

      await UserCollection.updateOne(
        { _id: ObjectId(user._id) },
        {
          $push: {
            invoiceId: {
              $each: [{ inId: insertInvoice.invoices[0]._id }],
              $position: 0,
            },
          },
        }
      );

      res.status(200).json("Invoice created");
    }
    //
  } catch (err) {
    const errors = handleErrors(err);
    res.status(500).json(errors);
  }
};

// ******** update invoice  ************ //
// ******************************************** //
module.exports.update_invoice = async (req, res) => {
  try {
    // collecting data from the request body
    const {
      consignorName,
      consignorEmail,
      consignorAddress,
      consignorPhoneNumber,
      consigneeName,
      consigneeEmail,
      consigneeAddress,
      consigneePhoneNumber,
      dateCreated,
      invoiceDueDate,
      products: [{ description, rate, qty, amount, taxPct }],
      totalAmount,
      totalTax,
      totalPayable,
      invoiceNotes,
    } = req.body;

    const user = req.user;

    if (!user) return res.sendStatus(401);

    const invoiceExists = await InvoiceCollection.findOne({
      userId: ObjectId(user._id),
      "invoices.invoiceNumber": req.body.invoiceNumber,
    });

    if (!invoiceExists) res.sendStatus(409);

    // first invoice generated by a user
    await InvoiceCollection.findOneAndUpdate(
      {
        _id: ObjectId(invoiceExists._id),
        "invoices.invoiceNumber": req.body.invoiceNumber,
      },
      { $set: { "invoices.$": req.body } }
    );
    res.status(200).json("Invoice Updated");

    //
  } catch (err) {
    const errors = handleErrors(err);
    res.status(500).json(errors);
  }
};
// ******** delete invoice  ************ //
// ******************************************** //

module.exports.delete_invoice = async (req, res) => {
  try {
    const user = req.user;

    if (!user) return res.sendStatus(401);

    const invoiceExists = await InvoiceCollection.findOne({
      userId: ObjectId(user._id),
      "invoices.invoiceNumber": req.body.invoiceNumber,
    });

    if (!invoiceExists) res.sendStatus(409);

    // to remove invoice from the invoice collection
    await InvoiceCollection.findOneAndUpdate(
      {
        _id: ObjectId(invoiceExists._id),
        "invoices.invoiceNumber": req.body.invoiceNumber,
      },
      { $pull: { invoices: { invoiceNumber: req.body.invoiceNumber } } }
    );

    // to remove record from the user collection
    await UserCollection.updateOne(
      { "invoiceId.inId": ObjectId(invoiceExists.invoices[0]._id) },
      {
        $pull: { invoiceId: { inId: ObjectId(invoiceExists.invoices[0]._id) } },
      }
    );

    res.status(200).json("Invoice Deleted");
    //
  } catch (err) {
    const errors = handleErrors(err);
    res.status(500).json(errors);
  }
};

// ******** show invoice  ************ //
// ******************************************** //

module.exports.display_invoice = async (req, res) => {
  const user = req.user;
  if (!user) return res.sendStatus(401);

  const invoiceData = await InvoiceCollection.find({}, { invoices: 1, _id: 0 });

  const container = [];
  for (let i = 0; i < invoiceData.length; i++) {
    container.push(...invoiceData[i].invoices);
  }

  res.status(200).json(container);

  // container.forEach(async (inv) => {
  //   const creator = await InvoiceCollection.aggregate([
  //     { $match: { "invoices.invoiceNumber": inv.invoiceNumber } },
  //     {
  //       $lookup: {
  //         from: "users",
  //         localField: "userId",
  //         foreignField: "_id",
  //         as: "userinfo",
  //       },
  //     },
  //     { $unwind: "$userinfo" },
  //     { $project: { firstName: 1, lastName: 1 } },
  //   ]);
  //   console.log(creator);
  // });
};
